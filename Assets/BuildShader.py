import os

import xml.etree.ElementTree as ET

# pip install pcpp
# https://pypi.org/project/pcpp
from pcpp import Preprocessor

shaderExt = [".xml"]


def needBuildShader(filename):
    for fileType in shaderExt:
        if filename.endswith(fileType):
            return True
    return False


def buildShader(shaderXml, root):
    for shaderInfo in shaderXml:
        fs = shaderInfo.get('fs')
        fs_source = shaderInfo.get('fs_source')

        vs = shaderInfo.get('vs')
        vs_source = shaderInfo.get('vs_source')

        define = shaderInfo.get('define')
        listDefine = None

        if define != None:
            listDefine = define.split(',')
        else:
            define = "_"

        if fs_source != None and fs != None:
            outputFile = root + "/" + fs
            inputFile = root + "/" + fs_source
            print("    + %s <- %s : %s" % (fs, fs_source, define))
            p = Preprocessor()
            p.compress = 2
            p.line_directive = None
            if listDefine != None:
                for d in listDefine:
                    p.define(d.strip())
            with open(inputFile, 'rt') as finput:
                p.parse(finput.read(), inputFile)

            with open(outputFile, 'w') as foutput:
                foutput.writelines(
                    "// File Generated by Assets/BuildShader.py - source: [" + os.path.basename(fs_source) + " : " + define + "]\n")
                p.write(foutput)

        if vs_source != None and vs != None:
            outputFile = root + "/" + vs
            inputFile = root + "/" + vs_source
            print("    + %s <- %s : %s" % (vs, vs_source, define))
            p = Preprocessor()
            p.compress = 2
            p.line_directive = None
            if listDefine != None:
                for d in listDefine:
                    p.define(d.strip())
            with open(inputFile, 'rt') as finput:
                p.parse(finput.read(), inputFile)

            with open(outputFile, 'w') as foutput:
                foutput.writelines(
                    "// File Generated by Assets/BuildShader.py - source: [" + os.path.basename(vs_source) + " : " + define + "]\n")
                p.write(foutput)
    return


def findShader(dirName):
    outputFile = None
    inputFile = None
    for root, dirs, files in os.walk(dirName):
        for file in files:
            if needBuildShader(file):
                inputFile = root + "/" + file
                treeXml = None
                try:
                    treeXml = ET.parse(inputFile)
                except Exception as e:
                    print("!!! Xml failed %s" % (file))
                    continue

                rootXml = treeXml.getroot()
                if rootXml.tag == 'shaderConfig':
                    print("- %s" % (file))
                    shader = rootXml.findall('shader')
                    buildShader(shader, root)


def main():
    directory = "."
    for filename in os.listdir(directory):
        if os.path.isdir(filename):
            findShader(filename)
            continue
        else:
            continue


if __name__ == '__main__':
    main()
