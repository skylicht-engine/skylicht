// File Generated by Assets/BuildShader.py - source: [BakeDirectionalLightFS.d.glsl : _]
precision mediump float;
uniform sampler2D uShadowMap;
in vec3 varWorldPosition;
in vec3 varWorldNormal;
uniform vec4 uLightColor;
uniform vec4 uLightDirection;
uniform mat4 uShadowMatrix;
out vec4 FragColor;
float shadowSimple(const vec4 shadowCoord)
{
	int id = 0;
	float visible = 1.0;
	const float bias = 0.0001;
	float depth = 0.0;
	float result = 0.0;
	vec3 shadowUV = shadowCoord.xyz / shadowCoord.w;
	depth = shadowUV.z;
	depth -= bias;
	vec2 uv = shadowUV.xy;
	float size = 1.0/2048.0;
	result += (step(depth, texture(uShadowMap, vec2(uv + vec2(-1, -1) * size)).r));
	result += (step(depth, texture(uShadowMap, vec2(uv + vec2(0, -1) * size)).r));
	result += (step(depth, texture(uShadowMap, vec2(uv + vec2(1, -1) * size)).r));
	result += (step(depth, texture(uShadowMap, vec2(uv + vec2(-1, 0) * size)).r));
	result += (step(depth, texture(uShadowMap, vec2(uv + vec2(0, 0) * size)).r));
	result += (step(depth, texture(uShadowMap, vec2(uv + vec2(1, 0) * size)).r));
	result += (step(depth, texture(uShadowMap, vec2(uv + vec2(-1, 1) * size)).r));
	result += (step(depth, texture(uShadowMap, vec2(uv + vec2(0, 1) * size)).r));
	result += (step(depth, texture(uShadowMap, vec2(uv + vec2(1, 1) * size)).r));
	return result / 9.0;
}
void main(void)
{
	vec4 shadowCoord = uShadowMatrix * vec4(varWorldPosition, 1.0);
	float visibility = shadowSimple(shadowCoord);
	float NdotL = max(dot(varWorldNormal, uLightDirection.xyz), 0.0);
	vec4 directionalLightColor = NdotL * uLightColor / 3.0;
	FragColor = vec4(directionalLightColor.rgb * visibility, 1.0);
}
