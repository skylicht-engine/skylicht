// File Generated by Assets/BuildShader.py - source: [TestTTSGVS.d.glsl : NO_TEXTURE]
in vec4 inPosition;
in vec3 inNormal;
in vec4 inColor;
in vec2 inTexCoord0;
uniform sampler2D uTransformTexture;
uniform mat4 uVpMatrix;
uniform mat4 uWorldMatrix;
uniform vec4 uCameraPosition;
uniform vec4 uLightDirection;
uniform vec4 uUVScale;
uniform vec2 uTransformTextureSize;
uniform vec2 uTransformXY;
out vec2 vTexCoord0;
out vec3 vWorldNormal;
out vec3 vWorldViewDir;
out vec3 vWorldLightDir;
out vec4 vViewPosition;
out vec3 vWorldPosition;
mat4 getTransformFromTexture(vec2 p)
{
	float centerX = 0.5 / uTransformTextureSize.x;
	float centerY = 0.5 / uTransformTextureSize.y;
	float nextPixelX = 1.0 / uTransformTextureSize.x;
	float nextPixelY = 1.0 / uTransformTextureSize.y;
	vec2 uv = vec2(
		p.x * nextPixelX * 4.0 + centerX,
		p.y * nextPixelY + centerY
	);
	vec4 c1 = textureLod(uTransformTexture, uv, 0.0);
	uv.x = uv.x + nextPixelX;
	vec4 c2 = textureLod(uTransformTexture, uv, 0.0);
	uv.x = uv.x + nextPixelX;
	vec4 c3 = textureLod(uTransformTexture, uv, 0.0);
	uv.x = uv.x + nextPixelX;
	vec4 c4 = textureLod(uTransformTexture, uv, 0.0);
	uv.x = uv.x + nextPixelX;
	return mat4(c1, c2, c3, c4);
}
void main(void)
{
	vTexCoord0 = inTexCoord0 * uUVScale.xy + uUVScale.zw;
	mat4 worldMatrix = uWorldMatrix * getTransformFromTexture(uTransformXY);
	vec4 worldPos = worldMatrix * inPosition;
	vec4 worldViewDir = normalize(uCameraPosition - worldPos);
	vec4 worldNormal = worldMatrix * vec4(inNormal.xyz, 0.0);
	vWorldPosition = worldPos.xyz;
	vWorldNormal = normalize(worldNormal.xyz);
	vWorldViewDir = worldViewDir.xyz;
	vWorldLightDir = normalize(uLightDirection.xyz);
	mat4 mvpMatrix = uVpMatrix * worldMatrix;
	vViewPosition = mvpMatrix * inPosition;
	gl_Position = vViewPosition;
}
