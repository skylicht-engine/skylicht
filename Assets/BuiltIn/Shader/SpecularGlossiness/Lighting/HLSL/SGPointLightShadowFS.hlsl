// File Generated by Assets/BuildShader.py - source: [SGPointLightShadowFS.d.hlsl : _]
Texture2D uTexPosition : register(t0);
SamplerState uTexPositionSampler : register(s0);
Texture2D uTexNormal : register(t1);
SamplerState uTexNormalSampler : register(s1);
Texture2D uTexData : register(t2);
SamplerState uTexDataSampler : register(s2);
TextureCube uShadowMap : register(t3);
SamplerState uShadowMapSampler : register(s3);
struct PS_INPUT
{
	float4 pos : SV_POSITION;
	float2 tex0 : TEXCOORD0;
};
cbuffer cbPerFrame
{
	float4 uCameraPosition;
	float4 uLightPosition;
	float4 uLightAttenuation;
	float4 uLightColor;
};
float4 main(PS_INPUT input) : SV_TARGET
{
	float3 position = uTexPosition.Sample(uTexPositionSampler, input.tex0).xyz;
	float3 normal = uTexNormal.Sample(uTexNormalSampler, input.tex0).xyz;
	float3 data = uTexData.Sample(uTexDataSampler, input.tex0).xyz;
	float3 v = uCameraPosition.xyz - position;
	float3 viewDir = normalize(v);
	float spec = data.r;
	float gloss = data.g;
	float3 direction = uLightPosition.xyz - position;
	float distance = length(direction);
	float attenuation = max(0.0, 1.0 - (distance * uLightAttenuation.y)) * uLightColor.a;
	float3 lightDir = normalize(direction);
	float NdotL = max(0.0, dot(lightDir, normal));
	float3 H = normalize(direction + viewDir);
	float NdotE = max(0.0,dot(normal, H));
	float specular = pow(NdotE, 100.0f * gloss) * spec;
	float bias = 0.2;
	float d = distance - bias;
	float shadow = 0.0;
	float samples = 2.0;
	float offset = 0.01;
	float delta = offset / (samples * 0.5);
	float3 fragToLight;
	float x = -offset;
	float y = -offset;
	float z = -offset;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uShadowMap.SampleLevel(uShadowMapSampler, fragToLight, 0).r, d);};
	z += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uShadowMap.SampleLevel(uShadowMapSampler, fragToLight, 0).r, d);};
	z = -offset;
	y += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uShadowMap.SampleLevel(uShadowMapSampler, fragToLight, 0).r, d);};
	z += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uShadowMap.SampleLevel(uShadowMapSampler, fragToLight, 0).r, d);};
	x += delta;
	y = -offset;
	z = -offset;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uShadowMap.SampleLevel(uShadowMapSampler, fragToLight, 0).r, d);};
	z += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uShadowMap.SampleLevel(uShadowMapSampler, fragToLight, 0).r, d);};
	z = -offset;
	y += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uShadowMap.SampleLevel(uShadowMapSampler, fragToLight, 0).r, d);};
	z += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uShadowMap.SampleLevel(uShadowMapSampler, fragToLight, 0).r, d);};
	shadow /= (samples * samples * samples);
	shadow = max(1.0 - shadow, 0.0);
	float3 lightColor = uLightColor.rgb * (NdotL * attenuation) * shadow;
	return float4(lightColor, specular * attenuation * shadow);
}
