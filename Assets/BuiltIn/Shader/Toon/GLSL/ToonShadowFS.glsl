// File Generated by Assets/BuildShader.py - source: [ToonFS.d.glsl : SHADOW]
precision mediump float;
precision highp sampler2D;
precision highp sampler2DArray;
uniform sampler2D uTexDiffuse;
uniform sampler2D uTexRamp;
uniform sampler2DArray uShadowMap;
uniform vec4 uLightDirection;
uniform vec4 uLightColor;
uniform vec4 uColor;
uniform vec4 uShadowColor;
uniform vec2 uWrapFactor;
uniform vec3 uSpecular;
uniform vec3 uShadowDistance;
uniform mat4 uShadowMatrix[3];
in vec2 vTexCoord0;
in vec3 vWorldNormal;
in vec3 vWorldViewDir;
in vec3 vWorldPosition;
in vec3 vDepth;
out vec4 FragColor;
const float gamma = 2.2;
const float invGamma = 1.0 / 2.2;
vec3 sRGB(vec3 color)
{
	return pow(color, vec3(gamma));
}
vec3 linearRGB(vec3 color)
{
	return pow(color, vec3(invGamma));
}
vec2 rand(vec2 co){
    return vec2(fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453),
	fract(sin(dot(co.yx ,vec2(12.9898,78.233))) * 43758.5453)) * 0.00047;
}
float texture2DCompare(vec3 uv, float compare) {
	float depth = texture(uShadowMap, uv).r;
	return step(compare, depth);
}
float shadow(const vec4 shadowCoord[3], const float shadowDistance[3], const float farDistance)
{
	int id = 0;
	float visible = 1.0;
	float bias = 0.0001;
	float depth = 0.0;
	float result = 0.0;
	float size = 2048.0;
	if (farDistance < shadowDistance[0])
		id = 0;
	else if (farDistance < shadowDistance[1])
		id = 1;
	else if (farDistance < shadowDistance[2])
		id = 2;
	else
		return 1.0;
	vec3 shadowUV = shadowCoord[id].xyz / shadowCoord[id].w;
	depth = shadowUV.z;
	vec2 uv = shadowUV.xy;
	for (int x = -1; x <= 1; x++)
	{
		for (int y = -1; y <= 1; y++)
		{
			vec2 off = vec2(x, y) / size;
			result += texture2DCompare(vec3(uv + off + rand(uv + off), id), depth - bias);
		}
	}
	return result / 9.0;
}
void main(void)
{
	vec3 diffuseMap = sRGB(texture(uTexDiffuse, vTexCoord0.xy).rgb);
	float NdotL = max((dot(vWorldNormal, uLightDirection.xyz) + uWrapFactor.x) / (1.0 + uWrapFactor.x), 0.0);
	vec3 rampMap = texture(uTexRamp, vec2(NdotL, NdotL)).rgb;
	vec3 color = sRGB(uColor.rgb);
	vec3 shadowColor = sRGB(uShadowColor.rgb);
	vec3 lightColor = sRGB(uLightColor.rgb);
	float visibility = 1.0;
	float depth = length(vDepth);
	vec4 shadowCoord[3];
	shadowCoord[0] = uShadowMatrix[0] * vec4(vWorldPosition, 1.0);
	shadowCoord[1] = uShadowMatrix[1] * vec4(vWorldPosition, 1.0);
	shadowCoord[2] = uShadowMatrix[2] * vec4(vWorldPosition, 1.0);
	float shadowDistance[3];
	shadowDistance[0] = uShadowDistance.x;
	shadowDistance[1] = uShadowDistance.y;
	shadowDistance[2] = uShadowDistance.z;
	visibility = shadow(shadowCoord, shadowDistance, depth);
	vec3 ramp = mix(color, shadowColor, uColor.a * (1.0 - visibility));
	ramp = mix(ramp, color, rampMap);
	vec3 h = normalize(uLightDirection.xyz + vWorldViewDir);
	float NdotH = max(0, dot(vWorldNormal, h));
	float spec = pow(NdotH, uSpecular.x*128.0) * uSpecular.y;
	spec = smoothstep(0.5-uSpecular.z*0.5, 0.5+uSpecular.z*0.5, spec);
	FragColor = vec4(diffuseMap * lightColor * ramp * (0.5 + visibility * 0.5) + lightColor * spec * visibility, 1.0);
}
